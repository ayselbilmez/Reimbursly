// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Reimbursly.Persistence.DbContext;

#nullable disable

namespace Reimbursly.Persistence.Migrations
{
    [DbContext(typeof(ReimburslyDbContext))]
    [Migration("20250506104934_SeedApprovedExpense")]
    partial class SeedApprovedExpense
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Reimbursly.Domain.Entities.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("IBAN")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e1111111-1111-1111-1111-111111111111"),
                            Email = "admin@company.com",
                            FirstName = "Admin",
                            IBAN = "TR330006100519786457841326",
                            LastName = "User",
                            PasswordHash = "$2a$11$D98K3R3iFiKeI7xq1QPX5Ox/UBVdDgPqbqppw4ZM5I.qkza2DmE.K",
                            PhoneNumber = "+905555555555",
                            RoleId = new Guid("66666666-6666-6666-6666-666666666666")
                        },
                        new
                        {
                            Id = new Guid("e2222222-2222-2222-2222-222222222222"),
                            Email = "demo@company.com",
                            FirstName = "Demo",
                            IBAN = "TR120006200340000005672235",
                            LastName = "User",
                            PasswordHash = "$2a$11$sneqoM59TqH7Y5dxG4pmAuvQhhXh8pG6ngp1Y8Ko/rUV2WeRFO.Ki",
                            PhoneNumber = "+905544444444",
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111")
                        });
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ApprovedById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PaymentMethodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ReceiptPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("CategoryId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LocationId");

                    b.HasIndex("PaymentMethodId");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f1111111-1111-1111-1111-111111111111"),
                            Amount = 150m,
                            CategoryId = new Guid("a1111111-1111-1111-1111-111111111111"),
                            CreatedAt = new DateTime(2025, 5, 6, 10, 49, 34, 210, DateTimeKind.Utc).AddTicks(4403),
                            Description = "Taxi fare to client meeting",
                            EmployeeId = new Guid("e2222222-2222-2222-2222-222222222222"),
                            LocationId = new Guid("b1111111-1111-1111-1111-111111111111"),
                            PaymentMethodId = new Guid("77777777-7777-7777-7777-777777777777"),
                            ReceiptPath = "uploads/receipts/receipt1.pdf",
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("f2222222-2222-2222-2222-222222222222"),
                            Amount = 850m,
                            ApprovedById = new Guid("e1111111-1111-1111-1111-111111111111"),
                            CategoryId = new Guid("a2222222-2222-2222-2222-222222222222"),
                            CreatedAt = new DateTime(2025, 5, 1, 10, 49, 34, 210, DateTimeKind.Utc).AddTicks(4411),
                            Description = "Hotel for business trip",
                            EmployeeId = new Guid("e2222222-2222-2222-2222-222222222222"),
                            LocationId = new Guid("b2222222-2222-2222-2222-222222222222"),
                            PaymentMethodId = new Guid("88888888-8888-8888-8888-888888888888"),
                            ReceiptPath = "uploads/receipts/receipt2.pdf",
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("f3333333-3333-3333-3333-333333333333"),
                            Amount = 500m,
                            CategoryId = new Guid("a6666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 5, 6, 10, 49, 34, 210, DateTimeKind.Utc).AddTicks(4470),
                            Description = "Online course subscription",
                            EmployeeId = new Guid("e2222222-2222-2222-2222-222222222222"),
                            LocationId = new Guid("b3333333-3333-3333-3333-333333333333"),
                            PaymentMethodId = new Guid("77777777-7777-7777-7777-777777777777"),
                            ReceiptPath = "uploads/receipts/receipt3.pdf",
                            Status = 2
                        });
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.ExpenseCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ExpenseCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1111111-1111-1111-1111-111111111111"),
                            Name = "Transportation"
                        },
                        new
                        {
                            Id = new Guid("a2222222-2222-2222-2222-222222222222"),
                            Name = "Accommodation"
                        },
                        new
                        {
                            Id = new Guid("a3333333-3333-3333-3333-333333333333"),
                            Name = "Meal"
                        },
                        new
                        {
                            Id = new Guid("a4444444-4444-4444-4444-444444444444"),
                            Name = "Refreshment"
                        },
                        new
                        {
                            Id = new Guid("a5555555-5555-5555-5555-555555555555"),
                            Name = "Office Supplies"
                        },
                        new
                        {
                            Id = new Guid("a6666666-6666-6666-6666-666666666666"),
                            Name = "Education"
                        },
                        new
                        {
                            Id = new Guid("a7777777-7777-7777-7777-777777777777"),
                            Name = "Representation Expenses"
                        });
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.ExpenseLocation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ExpenseLocations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1111111-1111-1111-1111-111111111111"),
                            Name = "İstanbul Office"
                        },
                        new
                        {
                            Id = new Guid("b2222222-2222-2222-2222-222222222222"),
                            Name = "Ankara Office"
                        },
                        new
                        {
                            Id = new Guid("b3333333-3333-3333-3333-333333333333"),
                            Name = "Home Office"
                        },
                        new
                        {
                            Id = new Guid("b4444444-4444-4444-4444-444444444444"),
                            Name = "Client Location"
                        });
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("PaymentMethods");

                    b.HasData(
                        new
                        {
                            Id = new Guid("77777777-7777-7777-7777-777777777777"),
                            Name = "Cash"
                        },
                        new
                        {
                            Id = new Guid("88888888-8888-8888-8888-888888888888"),
                            Name = "Credit Card"
                        });
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.RejectionReason", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApproverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("RejectedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ApproverId");

                    b.HasIndex("ExpenseId");

                    b.ToTable("RejectionReasons");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c1111111-1111-1111-1111-111111111111"),
                            ApproverId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            ExpenseId = new Guid("f3333333-3333-3333-3333-333333333333"),
                            Reason = "Missing receipt",
                            RejectedAt = new DateTime(2025, 5, 6, 10, 49, 34, 210, DateTimeKind.Utc).AddTicks(8231)
                        },
                        new
                        {
                            Id = new Guid("c2222222-2222-2222-2222-222222222222"),
                            ApproverId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            ExpenseId = new Guid("f3333333-3333-3333-3333-333333333333"),
                            Reason = "Exceeds budget",
                            RejectedAt = new DateTime(2025, 5, 6, 10, 49, 34, 210, DateTimeKind.Utc).AddTicks(8235)
                        },
                        new
                        {
                            Id = new Guid("c3333333-3333-3333-3333-333333333333"),
                            ApproverId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            ExpenseId = new Guid("f3333333-3333-3333-3333-333333333333"),
                            Reason = "Invalid category",
                            RejectedAt = new DateTime(2025, 5, 6, 10, 49, 34, 210, DateTimeKind.Utc).AddTicks(8246)
                        },
                        new
                        {
                            Id = new Guid("c4444444-4444-4444-4444-444444444444"),
                            ApproverId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            ExpenseId = new Guid("f3333333-3333-3333-3333-333333333333"),
                            Reason = "Insufficient details",
                            RejectedAt = new DateTime(2025, 5, 6, 10, 49, 34, 210, DateTimeKind.Utc).AddTicks(8250)
                        },
                        new
                        {
                            Id = new Guid("c5555555-5555-5555-5555-555555555555"),
                            ApproverId = new Guid("e1111111-1111-1111-1111-111111111111"),
                            ExpenseId = new Guid("f3333333-3333-3333-3333-333333333333"),
                            Reason = "Duplicate entry",
                            RejectedAt = new DateTime(2025, 5, 6, 10, 49, 34, 210, DateTimeKind.Utc).AddTicks(8253)
                        });
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("HierarchyLevel")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("11111111-1111-1111-1111-111111111111"),
                            HierarchyLevel = 0,
                            Name = "Assistant Specialist"
                        },
                        new
                        {
                            Id = new Guid("22222222-2222-2222-2222-222222222222"),
                            HierarchyLevel = 0,
                            Name = "Specialist"
                        },
                        new
                        {
                            Id = new Guid("33333333-3333-3333-3333-333333333333"),
                            HierarchyLevel = 0,
                            Name = "Manager"
                        },
                        new
                        {
                            Id = new Guid("44444444-4444-4444-4444-444444444444"),
                            HierarchyLevel = 0,
                            Name = "Director"
                        },
                        new
                        {
                            Id = new Guid("55555555-5555-5555-5555-555555555555"),
                            HierarchyLevel = 0,
                            Name = "CEO"
                        },
                        new
                        {
                            Id = new Guid("66666666-6666-6666-6666-666666666666"),
                            HierarchyLevel = 0,
                            Name = "Admin"
                        });
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.Employee", b =>
                {
                    b.HasOne("Reimbursly.Domain.Entities.Role", "Role")
                        .WithMany("Employees")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.Expense", b =>
                {
                    b.HasOne("Reimbursly.Domain.Entities.Employee", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Reimbursly.Domain.Entities.ExpenseCategory", "Category")
                        .WithMany("Expenses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reimbursly.Domain.Entities.Employee", "Employee")
                        .WithMany("Expenses")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reimbursly.Domain.Entities.ExpenseLocation", "Location")
                        .WithMany("Expenses")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Reimbursly.Domain.Entities.PaymentMethod", "PaymentMethod")
                        .WithMany("Expenses")
                        .HasForeignKey("PaymentMethodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApprovedBy");

                    b.Navigation("Category");

                    b.Navigation("Employee");

                    b.Navigation("Location");

                    b.Navigation("PaymentMethod");
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.RejectionReason", b =>
                {
                    b.HasOne("Reimbursly.Domain.Entities.Employee", "Approver")
                        .WithMany()
                        .HasForeignKey("ApproverId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Reimbursly.Domain.Entities.Expense", "Expense")
                        .WithMany("Rejections")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Approver");

                    b.Navigation("Expense");
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.Employee", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.Expense", b =>
                {
                    b.Navigation("Rejections");
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.ExpenseLocation", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.PaymentMethod", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("Reimbursly.Domain.Entities.Role", b =>
                {
                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
